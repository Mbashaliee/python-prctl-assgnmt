#declaring a functiion with two numbers

def add_two_numbers(num1, num2):
    
    return num1 + num2


#function calculating area of a circle
import math

def area_of_a_circle(radius):

    return math.pi*radius**2


#converting temperature units

def convert_celcius_to_fahrenheit(celcius):

    fahrenheit=(celcius*9/5)+32

    return fahrenheit

#Write a function called check-season, it takes a month parameter and returns the season: Autumn, Winter, Spring or Summer.

def check_season(month):

    if month in (3, 4, 5):

        return "spring"

    if month in (6, 7, 8):

        return "summer"
    
    if month in (9, 10, 11):

        return "Autumn"
    
    if month in (12, 1, 2):

        return "Winter"
    
    else:

        return "Invalid month"
    

#Write a function called calculate_slope which return the slope of a linear equation
    
def calculate_slope(x1, y1, x2, y2):

    slope=(y2-y1)/(x2-x1)

    return slope


#Quadratic equation is calculated as follows: axÂ² + bx + c = 0. Write a function which calculates solution set of a quadratic equation, solve_quadratic_eqn.
import cmath  # Importing cmath module for handling complex numbers

def solve_quadratic_eqn(a, b, c):
    
    discriminant = (b**2) - (4*a*c)

    # Check the nature of the roots based on the discriminant
    if discriminant > 0:
        
        # Real and distinct roots
        
        root1 = (-b + cmath.sqrt(discriminant)) / (2*a)
        
        root2 = (-b - cmath.sqrt(discriminant)) / (2*a)
        
        return root1, root2
    
    elif discriminant == 0:
    
        # Real and identical roots
    
        root = -b / (2*a)
    
        return root, root
    
    else:

        # Complex roots
        real_part = -b / (2*a)
        
        imaginary_part = cmath.sqrt(abs(discriminant)) / (2*a)
        
        root1 = complex(real_part, imaginary_part)
        
        root2 = complex(real_part, -imaginary_part)
        
        return root1, root2

#Declare a function named print_list. It takes a list as a parameter and it prints out each element of the list.
def print_list(my_list):

    for item in my_list:
    
        print(item)


#Declare a function named reverse_list. It takes an array as a parameter and it returns the reverse of the array (use loops).
def reverse_list(arr):

    reversed_arr=[]

    for i in range(len(arr)-1, -1, -1):

        reversed_arr.append(arr[i])

    return reversed_arr

#Declare a function named capitalize_list_items. It takes a list as a parameter and it returns a capitalized list of items
def capitalize_list_items(my_list):

    capitalized_list=[]

    for item in my_list:

        capitalized_list.append(item.capitalize())

    return capitalized_list

#Declare a function named add_item. It takes a list and an item parameters. It returns a list with the item added at the end.
def add_item(fruit):

    food_stuff=['potato', 'tomato', 'mango', 'milk'];

    return add_item.append(food_stuff())

#Declare a function named remove_item. It takes a list and an item parameters. It returns a list with the item removed from it.

def remove_item(my_list, item):

    if item in my_list:

        my_list.remove(item)

    return my_list

my_list=['potato', 'tomato', 'mango', 'milk']

print(remove_item(my_list, 'mango'))

#Declare a function named sum_of_numbers. It takes a number parameter and it adds all the numbers in that range.
def sum_of_numbers(n):

    return sum(range(1, n+1))

print(sum_of_numbers(5))
print(sum_of_numbers(10))
print(sum_of_numbers(100))

#Declare a function named sum_of_odds. It takes a number parameter and it adds all the odd numbers in that range.
def sum_of_odds(n):
    
    return sum(x for x in range(1, n+1) if x % 2 !=0)

#Declare a function named sum_of_even. It takes a number parameter and it adds all the even numbers in that - range.
def sum_of_even(n):
    
    return sum(x for x in range(1, n+1) if x % 2==0)


#Declare a function named evens_and_odds . It takes a positive integer as parameter and it counts number of evens and odds in the number.
def evens_and_odds(n):
    
    evens=sum(1 for x in range(1, n+1) if x % 2 ==0)

    odds=sum(1 for x in range(1, n+1) if x % 2 !=0)

print(evens_and_odds(100))

#Call your function factorial, it takes a whole number as a parameter and it return a factorial of the number
def factorial(n):

    if n==0:

        return n*factorial(n-1)
    

#Call your function is_empty, it takes a parameter and it checks if it is empty or not
def is_empty(paran):

    if not paran:

        return True
    
    else:

        return False
    
print(is_empty(""))   

#Write different functions which take lists. They should calculate_mean, calculate_median, calculate_mode, calculate_range, calculate_variance, calculate_std (standard deviation).
import statistics

def calculate_mean(data):

    return sum(data)/len(data)

def calculate_median(data):

    return statistics.median(data)

def calculate_mode(data):

    return statistics.mode(data)


def calculate_range(data):


    return max(data)-len(data)

def calculate_variance(data):

    return statistics.variance(data)


def calculate_std(data):

    return statistics.stdev(data)


#function called is_prime, which checks if a number is prime.
def is_prime(n):

    if n<=1:

        return False
    
    elif n<=3:

        return True
    
    elif n%2 ==0 or n%3==0:

        return False
    
    i=5

    while i*i <=n:

        if n % i ==0 or n % (i+2) ==0:

            return False
        
        i+=6

    return True


#Write a functions which checks if all items are unique in the list
def are_all_unique(list):

    return len(list)==len(set(list))


#Write a function which checks if all the items of the list are of the same data type.
def are_all_same_type(list):

    if len(list)==0:

        return True
    
    first_type=type(list[0])

    return all(type(item) == first_type for item in list)


#Write a function which check if provided variable is a valid python variable
def is_valid_variable(variable_name):

    return variable_name.isidentifier()


